---
subject: 'Programming Languages'
title:  |
 Linear Typing for Go
date: 03.01.2018
subtitle: |
 A loose adaption of capabilities for sharing. \
 \
 Master's Thesis
documentclass: scrreprt
#classoption: twoside
secnumdepth: 2
toc-depth: 1
header-includes:
 - \usepackage[]{graphicx}
 - \usepackage{amsmath,amsthm,mathtools,amssymb}
 - \usepackage{lstgolang}
 - \usepackage{xcolor}
 - \usepackage{fancyref}
 - \usepackage{ stmaryrd }
 - \lstset{language=Go,basicstyle=\small\ttfamily,commentstyle=\ttfamily\itshape\color{gray},columns=fullflexible,keepspaces=true,breaklines=true,basewidth={0.5em,0.5em},frame=tb}
links-as-notes: true
toc: true
listings: true
highlight-style: monochrome - \fontfamily{lmvtt}\selectfont
author: |
 Julian Andres Klode \
 Philipps-Universit√§t Marburg
reference-section-title: References
abstract: |
 Go is a programming language aimed at writing highly-concurrent software
 like web server  s. In concurrent programs, exchanging data between concurrent
 calculations (goroutines) is essential.

 Go embraces a culture of "Don't communicate by sharing memory, share memory
 by communicating." (Rob Pike), that is, sending pointers to memory between
 goroutines. It does not, however, provide a way to validate that there is
 no other reference to the same memory location, which could result in two
 goroutines trying to write to the same location in parallel, for example.

 This thesis tries to approach the problem by introducing annotations for
 linearity into Go programs, effectively allowing a programmer to state that
 a given memory location can only be referenced by exactly one reference, which
 can then be moved between goroutines as needed.
---
